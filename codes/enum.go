// Code generated by "enumer -linecomment -output=enum.go -text -type=Code"; DO NOT EDIT.

package codes

import (
	"fmt"
	"strings"
)

const _CodeName = "stop serverto many connectionsbye"

var _CodeIndex = [...]uint8{0, 11, 30, 33}

const _CodeLowerName = "stop serverto many connectionsbye"

func (i Code) String() string {
	if i >= Code(len(_CodeIndex)-1) {
		return fmt.Sprintf("Code(%d)", i)
	}
	return _CodeName[_CodeIndex[i]:_CodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CodeNoOp() {
	var x [1]struct{}
	_ = x[StopServer-(0)]
	_ = x[ToManyConns-(1)]
	_ = x[Done-(2)]
}

var _CodeValues = []Code{StopServer, ToManyConns, Done}

var _CodeNameToValueMap = map[string]Code{
	_CodeName[0:11]:       StopServer,
	_CodeLowerName[0:11]:  StopServer,
	_CodeName[11:30]:      ToManyConns,
	_CodeLowerName[11:30]: ToManyConns,
	_CodeName[30:33]:      Done,
	_CodeLowerName[30:33]: Done,
}

var _CodeNames = []string{
	_CodeName[0:11],
	_CodeName[11:30],
	_CodeName[30:33],
}

// CodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CodeString(s string) (Code, error) {
	if val, ok := _CodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Code values", s)
}

// CodeValues returns all values of the enum
func CodeValues() []Code {
	return _CodeValues
}

// CodeStrings returns a slice of all String values of the enum
func CodeStrings() []string {
	strs := make([]string, len(_CodeNames))
	copy(strs, _CodeNames)
	return strs
}

// IsACode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Code) IsACode() bool {
	for _, v := range _CodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Code
func (i Code) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Code
func (i *Code) UnmarshalText(text []byte) error {
	var err error
	*i, err = CodeString(string(text))
	return err
}
