// Code generated by "enumer -output=loglevel.go -text -transform=upper -trimprefix=LogLevel -type=LogLevel"; DO NOT EDIT.

package chat

import (
	"fmt"
	"strings"
)

const _LogLevelName = "DEBUGINFOWARNERROR"

var _LogLevelIndex = [...]uint8{0, 5, 9, 13, 18}

const _LogLevelLowerName = "debuginfowarnerror"

func (i LogLevel) String() string {
	if i < 0 || i >= LogLevel(len(_LogLevelIndex)-1) {
		return fmt.Sprintf("LogLevel(%d)", i)
	}
	return _LogLevelName[_LogLevelIndex[i]:_LogLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LogLevelNoOp() {
	var x [1]struct{}
	_ = x[LogLevelDebug-(0)]
	_ = x[LogLevelInfo-(1)]
	_ = x[LogLevelWarn-(2)]
	_ = x[LogLevelError-(3)]
}

var _LogLevelValues = []LogLevel{LogLevelDebug, LogLevelInfo, LogLevelWarn, LogLevelError}

var _LogLevelNameToValueMap = map[string]LogLevel{
	_LogLevelName[0:5]:        LogLevelDebug,
	_LogLevelLowerName[0:5]:   LogLevelDebug,
	_LogLevelName[5:9]:        LogLevelInfo,
	_LogLevelLowerName[5:9]:   LogLevelInfo,
	_LogLevelName[9:13]:       LogLevelWarn,
	_LogLevelLowerName[9:13]:  LogLevelWarn,
	_LogLevelName[13:18]:      LogLevelError,
	_LogLevelLowerName[13:18]: LogLevelError,
}

var _LogLevelNames = []string{
	_LogLevelName[0:5],
	_LogLevelName[5:9],
	_LogLevelName[9:13],
	_LogLevelName[13:18],
}

// LogLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogLevelString(s string) (LogLevel, error) {
	if val, ok := _LogLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LogLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogLevel values", s)
}

// LogLevelValues returns all values of the enum
func LogLevelValues() []LogLevel {
	return _LogLevelValues
}

// LogLevelStrings returns a slice of all String values of the enum
func LogLevelStrings() []string {
	strs := make([]string, len(_LogLevelNames))
	copy(strs, _LogLevelNames)
	return strs
}

// IsALogLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogLevel) IsALogLevel() bool {
	for _, v := range _LogLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for LogLevel
func (i LogLevel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LogLevel
func (i *LogLevel) UnmarshalText(text []byte) error {
	var err error
	*i, err = LogLevelString(string(text))
	return err
}
